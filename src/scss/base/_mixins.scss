@use "sass:math" as math;
@use "vars" as global;
@use "functions" as *;

@mixin adaptive-clamp($property, $start-size, $min-size, $width-from: global.$container-width, $width-to: global.$min-width, $keep-size: 0) {
  $add-size: math.div($start-size - $min-size, 16);

  $width-from-media: em($width-from);
  $width-to-media: em($width-to);

  $slope: math.div(($start-size - $min-size), ($width-from - $width-to));
  $y-intersection: -$width-to * $slope + $min-size;
  $fly-value: #{rem($y-intersection)}" + " #{$slope * 100}vw;

  $property-value: #{"clamp(" rem($min-size) "," $fly-value "," rem($start-size) ")"};

  @if $width-from == global.$container-width and global.$max-width-container == 0 {
    $width-from: global.$max-width;
  }

  @if $min-size <= 0 {
    $min-size: 0.0001;
  }

  @if $start-size <= 0 {
    $start-size: 0.0001;
  }
  @if $min-size > $start-size {
    $property-value: #{"clamp(" rem($start-size) "," $fly-value "," rem($min-size) ")"};
  }

  @if $width-from == global.$container-width or $width-from == global.$max-width or $keep-size == 1 or $keep-size == 2 {
    @media (min-width: $width-from-media) {
      #{$property}: rem($start-size);
    }
  }

  @media (min-width: $width-to-media) and (max-width: $width-from-media) {
    @supports (#{$property}: $property-value) {
      #{$property}: $property-value;
    }
    @supports not (#{$property}: $property-value) {
      #{$property}: calc(#{rem($min-size)} + #{$add-size} * (100vi - #{rem($width-to)}) / #{math.div($width-from, 16) - math.div($width-to, 16)});
    }
  }

  @if $width-to == global.$min-width or $keep-size == 1 or $keep-size == 3 {
    @media (max-width: $width-to-media) {
      #{$property}: rem($min-size);
    }
  }
}

@mixin media-mx($value) {
  $width: em($value);

  @media (max-width: $width) {
    @content;
  }
}

@mixin media-mn($value) {
  $width: em($value + 0.98);

  @media (min-width: $width) {
    @content;
  }
}
